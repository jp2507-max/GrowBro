---
alwaysApply: true
---

# Project Structure

## Root Directory Organization

```
├── src/                    # Main source code
├── assets/                 # Static assets (images, fonts, icons)
├── supabase/              # Database migrations and schema
├── .expo/                 # Expo build artifacts
├── .maestro/              # E2E test flows
├── .husky/                # Git hooks configuration
├── __mocks__/             # Jest mocks for testing
├── scripts/               # Build and utility scripts
├── docs/                  # Project documentation
├── prompts/               # AI assistant prompts
└── coverage/              # Test coverage reports
```

## Source Code Structure (`src/`)

### Core Directories

- **`src/app/`** - Expo Router file-based routing

  - `_layout.tsx` - Root layout with providers
  - `(app)/` - Main authenticated app routes
  - `login.tsx`, `onboarding.tsx` - Auth flows

- **`src/components/`** - Reusable UI components

  - `ui/` - Base design system components
  - `settings/` - Settings-specific components
  - Individual component files (buttons, inputs, etc.)

- **`src/lib/`** - Core utilities and configurations

  - `auth/` - Authentication logic
  - `hooks/` - Custom React hooks
  - `i18n/` - Internationalization setup
  - `privacy/` - Privacy and consent management
  - Core utilities (storage, supabase, notifications, etc.)

- **`src/api/`** - API layer and data fetching

  - `common/` - Shared API utilities
  - Feature-specific API modules (posts/, etc.)
  - `types.ts` - API type definitions

- **`src/types/`** - TypeScript type definitions
- **`src/translations/`** - i18n JSON files (en.json, de.json)

## Key Configuration Files

### Environment & Build

- `env.js` - Environment variable validation and configuration
- `app.config.ts` - Expo configuration with environment-specific settings
- `eas.json` - EAS Build profiles for different environments

### Code Quality

- `eslint.config.mjs` - ESLint configuration with TypeScript, Prettier, Tailwind rules
- `tsconfig.json` - TypeScript configuration with strict mode and path aliases
- `jest.config.js` - Jest testing configuration
- `tailwind.config.js` - Tailwind CSS configuration with custom colors

### Package Management

- `package.json` - Dependencies and scripts
- `pnpm-lock.yaml` - Lock file for pnpm
- `.npmrc` - npm configuration

## Import Conventions

### Path Aliases

- `@/*` - Maps to `src/*` for absolute imports
- `@env` - Maps to `src/lib/env.js` for environment variables

### Import Patterns

```typescript
// External libraries first
import React from 'react';
import { View } from 'react-native';

// Internal imports with @ alias
import { Button } from '@/components/ui';
import { useAuth } from '@/lib/auth';
import { Env } from '@env';
```

## File Naming Conventions

- **Components**: PascalCase for React components (`LoginForm.tsx`)
- **Utilities**: kebab-case for utility files (`task-notifications.ts`)
- **Hooks**: camelCase starting with 'use' (`useThemeConfig.tsx`)
- **Types**: kebab-case with `.d.ts` extension (`expo-notifications.d.ts`)
- **Tests**: Same name as file with `.test.ts` suffix

## Asset Organization

### Images & Icons

- `assets/icon.png` - App icon
- `assets/adaptive-icon.png` - Android adaptive icon
- `assets/splash-icon.png` - Splash screen icon
- `assets/fonts/` - Custom fonts (Inter.ttf)

### Generated Assets

- `.expo/` - Expo build artifacts (auto-generated)
- `coverage/` - Test coverage reports
- `node_modules/` - Dependencies

## Database & Backend

### Supabase Integration

- `src/lib/supabase.ts` - Supabase client configuration
- `supabase/migrations/` - Database schema migrations
- Environment-specific Supabase projects

### Offline-First Architecture

- WatermelonDB models and schemas (to be implemented)
- Local SQLite database with sync capabilities
- Image storage in device filesystem with DB metadata

## Testing Structure

### Unit Tests

- Co-located with source files (`.test.ts` suffix)
- `__mocks__/` - Jest mocks for React Native modules
- `jest-setup.ts` - Global test configuration

### E2E Tests

- `.maestro/` - Maestro test flows
- `app/`, `auth/`, `utils/` - Organized by feature area

## Development Workflow

### Git Hooks

- `.husky/pre-commit` - Runs linting and type checking
- `.husky/commit-msg` - Validates commit message format
- `lint-staged.config.js` - Staged file linting configuration

### Scripts Organization

- `scripts/` - Build utilities and custom scripts
- Package.json scripts for common development tasks
